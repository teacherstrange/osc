name: "deployment"
description: "create app in fly.io, create session secret, delete and create volume, deploy app, delete old connection strings"
inputs:
  APP_NAME:
    required: true
    description: "the app name"
  FLY_PR_BRANCH_SESSION_SECRET:
    required: true
    description: "the secret for fly.io pr apps"
  FLY_API_TOKEN:
    required: true
    description: "the API token for fly.io"
  PLANETSCALE_SERVICE_TOKEN_ID:
    required: true
    description: "the planetscale service token id"
  PLANETSCALE_SERVICE_TOKEN:
    required: true
    description: "the planetscale service token id"
  ORG_NAME:
    required: true
    description: "the name of the organization"
  DB_NAME:
    required: true
    description: "the name of the database"
runs:
  using: "composite"
  steps:
    - name: format head_ref
      uses: bluwy/substitute-string-action@v1
      id: findandreplace
      with:
        _input-text: ${{ github.head_ref }}
        /: "-"

    # remove this, it is now in the docker build step?
    - name: Get PR details
      shell: bash
      run: |
        echo "HEAD_REF=${{ steps.findandreplace.outputs.result }}" >> $GITHUB_ENV
        echo "BASE_REF=${{ github.base_ref  }}" >> $GITHUB_ENV
        echo "PR_CLOSED=${{ github.event.pull_request.merged == true }}" >> $GITHUB_ENV

    - name: Create app
      uses: superfly/flyctl-actions@1.1
      continue-on-error: true
      with:
        # ${{ steps.readAndLogAppNameAndBranch.outputs.app-name }}
        args: "apps create pr-${{ github.event.number }}-${{ inputs.APP_NAME }} --org open-study-college"

    - name: Create session secret
      uses: superfly/flyctl-actions@1.1
      continue-on-error: true
      with:
        # ${{ secrets.FLY_PR_BRANCH_SESSION_SECRET }}  ${{ steps.readAndLogAppNameAndBranch.outputs.app-name }}
        args: "secrets set SESSION_SECRET=${{ inputs.FLY_PR_BRANCH_SESSION_SECRET }} --config ./fly-pr.toml --app pr-${{ github.event.number }}-${{ inputs.APP_NAME }}"

    - uses:
        superfly/flyctl-actions/setup-flyctl@master

        # ${{ steps.app_name.outputs.value }}
    - name: delete all old volumes
      if: ${{ env.BASE_REF != 'main' && env.PR_CLOSED != 'true' }}
      shell: bash
      run: |
        VOLUMES=`flyctl volumes list --json --app pr-${{ github.event.number }}-${{ inputs.APP_NAME }}`;
        if jq -e '(length) > 0' <<< "$VOLUMES"; then
            echo $VOLUMES | jq -r '.[].id' | while read -r id ; do
                echo "Deleting ${id}"
                flyctl volumes delete ${id} -y
            done
        else
            echo 'no volumes to delete'
            exit 0
        fi

      # ${{ steps.readAndLogAppNameAndBranch.outputs.app-name }}
    - name: Create volume
      uses: superfly/flyctl-actions@1.1
      continue-on-error: true
      with:
        args: "volumes create data --region lhr --size 1 --app pr-${{ github.event.number }}-${{ inputs.APP_NAME }}"

      # ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}} ${{secrets.PLANETSCALE_SERVICE_TOKEN}} ${{secrets.ORG_NAME}} ${{secrets.DB_NAME}}
    - name: Create and merge deployment request to main
      shell: bash
      if: ${{ env.BASE_REF == 'main' && env.PR_CLOSED == 'true' }}
      id: create-dr
      env:
        PLANETSCALE_SERVICE_TOKEN_ID: ${{inputs.PLANETSCALE_SERVICE_TOKEN_ID}}
        PLANETSCALE_SERVICE_TOKEN: ${{inputs.PLANETSCALE_SERVICE_TOKEN}}
        ORG_NAME: ${{inputs.ORG_NAME}}
        DB_NAME: ${{inputs.DB_NAME}}
        GITHUB_USER: ${{github.actor}}
        BRANCH_NAME: staging
      run: |
        ./.pscale/cli-helper-scripts/create-dr-to-main.sh "$BRANCH_NAME"

      # deploy prod and osc-studio prod
    - name: ðŸš€ Deploy Production
      id: deploy-production
      if: ${{ env.BASE_REF == 'main' && env.PR_CLOSED == 'true' }}
      uses: superfly/flyctl-actions@1.3
      with:
        args: "deploy --image registry.fly.io/${{ inputs.APP_NAME }}:${{ env.HEAD_REF }}-${{ github.sha }}"
      env:
        FLY_API_TOKEN: ${{ inputs.FLY_API_TOKEN }}

      # deploy pr branches and osc-studio pr branches
    - name: ðŸš€ Deploy PR Branch
      id: deploy-pr
      if: ${{ env.BASE_REF != 'main' && env.PR_CLOSED != 'true' }}
      uses: superfly/fly-pr-review-apps@1.0.0
      with:
        image: registry.fly.io/${{ inputs.APP_NAME }}:${{ env.HEAD_REF }}-${{ github.sha }}
        org: "open-study-college"
        name: pr-${{ github.event.number }}-${{ inputs.APP_NAME }}
        args: "deploy --build-arg SESSION_SECRET=${{ inputs.FLY_PR_BRANCH_SESSION_SECRET }} --app pr-${{ github.event.number }}-${{ inputs.APP_NAME }}"
      env:
        FLY_API_TOKEN: ${{ inputs.FLY_API_TOKEN }}

    - name: delete old connection string to STAGING (PR Branch)
      shell: bash
      id: delete-cs
      if: steps.deploy-production.conclusion != 'skipped' || steps.deploy-pr.conclusion != 'skipped'
      env:
        PLANETSCALE_SERVICE_TOKEN_ID: ${{inputs.PLANETSCALE_SERVICE_TOKEN_ID}}
        PLANETSCALE_SERVICE_TOKEN: ${{inputs.PLANETSCALE_SERVICE_TOKEN}}
        ORG_NAME: ${{inputs.ORG_NAME}}
        DB_NAME: ${{inputs.DB_NAME}}
        GITHUB_USER: ${{github.actor}}
        BRANCH_NAME: staging
        PASSWORD_NAME: staging-${{ inputs.APP_NAME }}
      run: |
        ./.pscale/cli-helper-scripts/delete-old-password.sh

      # ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}} ${{secrets.PLANETSCALE_SERVICE_TOKEN}} ${{secrets.ORG_NAME}} ${{secrets.DB_NAME}} ${{ steps.app_name.outputs.value }} ${{ steps.app_name.outputs.value }}
    - name: delete old connection string to MAIN
      id: delete-cs-main
      if: steps.delete-cs.conclusion != 'skipped' && ${{ env.BASE_REF == 'main' && env.PR_CLOSED == 'true' }}
      shell: bash
      env:
        PLANETSCALE_SERVICE_TOKEN_ID: ${{inputs.PLANETSCALE_SERVICE_TOKEN_ID}}
        PLANETSCALE_SERVICE_TOKEN: ${{inputs.PLANETSCALE_SERVICE_TOKEN}}
        ORG_NAME: ${{inputs.ORG_NAME}}
        DB_NAME: ${{inputs.DB_NAME}}
        GITHUB_USER: ${{github.actor}}
        BRANCH_NAME: main
        PASSWORD_NAME: main-${{ inputs.APP_NAME }}
      run: |
        ./.pscale/cli-helper-scripts/delete-old-password.sh
