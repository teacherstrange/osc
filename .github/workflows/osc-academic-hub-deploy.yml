name: üöÄ Deploy osc-academic-hub
on:
  push:
    branches:
      - main
      - dev
    paths:
      - "packages/osc-academic-hub/**"
      - ".github/workflow/osc-academic-hub-deploy.yml"
      - "packages/osc-ui/**"
  pull_request: {}
permissions:
  actions: write
  contents: read

jobs:
  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: üî¨ Lint
        run: npm run lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: üîé Type check
        run: npm run typecheck --if-present

  vitest:
    name: ‚ö° Vitest
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - run: npm run setup
      - run: npm run build:osc-ui

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: ‚ö° Run vitest
        run: npm run test

  cypress:
    name: ‚ö´Ô∏è Cypress
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - run: npm run setup
      - run: npm run build:osc-ui

      - run: rm -v -r ./package.json ./.storybook ./node_modules
      - run: mkdir ./.storybook
      - run: mkdir ./prisma
      - run: mv -v -f packages/osc-academic-hub/* .

      - run: npm run addDevDeps

      - name: üèÑ Copy test env vars
        run: cp .env.cypress .env

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: üõ† Setup Database
        run: npx prisma migrate reset --force

      - name: ‚öôÔ∏è Build
        run: npm run build

      - name: üå≥ Cypress run
        uses: cypress-io/github-action@v3
        with:
          start: npm run start:mocks
          wait-on: "http://localhost:8811"
        env:
          PORT: "8811"

  build:
    name: üê≥ Build
    # only build/deploy main branch on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      # need to delete all other packages in this step

      - run: npm run setup
      - run: npm run build:osc-ui

      - run: rm -v -r ./package.json ./.storybook ./node_modules
      - run: mkdir ./.storybook
      - run: mkdir ./prisma
      - run: mv -v -f packages/osc-academic-hub/* .

      - run: npm run addDevDeps

      - name: üëÄ Read app name
        uses: SebRollen/toml-action@v1.0.0
        id: app_name
        with:
          file: "fly.toml"
          field: "app"

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Setup cache
      - name: ‚ö°Ô∏è Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: üîë Fly Registry Auth
        uses: docker/login-action@v1
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }}

      - name: create connection string to BASE_REF
        id: create-cs
        if: ${{ (env.BASE_REF == 'production' || env.BASE_REF == 'release' || env.BASE_REF == 'staging') && env.PR_CLOSED == 'true' }}
        timeout-minutes: 3
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
          PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
          ORG_NAME: ${{secrets.ORG_NAME}}
          DB_NAME: ${{secrets.DB_NAME}}
          GITHUB_USER: ${{github.actor}}
          BRANCH_NAME: ${{ env.BASE_REF }}
          PASSWORD_NAME: ${{ env.BASE_REF }}-${{ steps.app_name.outputs.value }}
        run: |
          ./.pscale/cli-helper-scripts/create-branch-connection-string-pr-branches.sh

      - name: create connection string to MAIN
        id: create-cs-main
        if: ${{ env.BASE_REF == 'production' && env.PR_CLOSED == 'true' }}
        timeout-minutes: 3
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
          PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
          ORG_NAME: ${{secrets.ORG_NAME}}
          DB_NAME: ${{secrets.DB_NAME}}
          GITHUB_USER: ${{github.actor}}
          BRANCH_NAME: main
          PASSWORD_NAME: main-${{ steps.app_name.outputs.value }}
        run: |
          ./.pscale/cli-helper-scripts/create-branch-connection-string.sh

      # added here
      - name: create connection string to MAIN-SHADOW
        id: create-cs-main-shadow
        if: ${{ env.BASE_REF == 'release' && env.PR_CLOSED == 'true' }}
        timeout-minutes: 3
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
          PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
          ORG_NAME: ${{secrets.ORG_NAME}}
          DB_NAME: ${{secrets.DB_NAME}}
          GITHUB_USER: ${{github.actor}}
          BRANCH_NAME: main-shadow
          PASSWORD_NAME: main-shadow-${{ steps.app_name.outputs.value }}
        run: |
          ./.pscale/cli-helper-scripts/create-branch-connection-string-shadow.sh

        # added here
      - name: Create and merge deployment request to main-shadow
        if: ${{ env.BASE_REF == 'release' && env.PR_CLOSED == 'true' }}
        id: create-dr-main-shadow
        timeout-minutes: 3
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
          PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
          ORG_NAME: ${{secrets.ORG_NAME}}
          DB_NAME: ${{secrets.DB_NAME}}
          GITHUB_USER: ${{github.actor}}
          BRANCH_NAME: release
        run: |
          ./.pscale/cli-helper-scripts/create-dr-to-main.sh "$BRANCH_NAME"

      - name: üê≥ Docker build production
        id: docker-build-prod
        if: ${{ env.BASE_REF == 'production' && env.PR_CLOSED == 'true' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: registry.fly.io/${{ steps.app_name.outputs.value }}:${{ github.ref_name }}-${{ github.sha }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: üöö Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [lint, typecheck, vitest, cypress, build]
    # only build/deploy main branch on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}

    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - run: rm -v -r ./package.json ./.storybook
      - run: mkdir ./.storybook
      - run: mkdir ./prisma
      - run: mv -v -f packages/osc-academic-hub/* .

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
      - run: npm run addDevDeps
      - name: üëÄ Read app name
        uses: SebRollen/toml-action@v1.0.0
        id: app_name
        with:
          file: "fly.toml"
          field: "app"

      - name: üöÄ Deploy Staging
        if: ${{ github.ref == 'refs/heads/dev' }}
        uses: superfly/flyctl-actions@1.3
        with:
          args: "deploy --app ${{ steps.app_name.outputs.value }}-staging --image registry.fly.io/${{ steps.app_name.outputs.value }}:${{ github.ref_name }}-${{ github.sha }}"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: üöÄ Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: superfly/flyctl-actions@1.3
        with:
          args: "deploy --image registry.fly.io/${{ steps.app_name.outputs.value }}:${{ github.ref_name }}-${{ github.sha }}"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Create and merge deployment request to main
        if: ${{ env.BASE_REF == 'production' && env.PR_CLOSED == 'true' }}
        id: create-dr
        timeout-minutes: 3
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
          PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
          ORG_NAME: ${{secrets.ORG_NAME}}
          DB_NAME: ${{secrets.DB_NAME}}
          GITHUB_USER: ${{github.actor}}
          BRANCH_NAME: production
        run: |
          ./.pscale/cli-helper-scripts/create-dr-to-main.sh "$BRANCH_NAME"

      - name: delete old connection string to BASE_REF
        id: delete-cs
        if: steps.deploy-production.conclusion != 'skipped' || steps.deploy-release.conclusion != 'skipped' || steps.deploy-staging.conclusion != 'skipped'
        timeout-minutes: 3
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
          PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
          ORG_NAME: ${{secrets.ORG_NAME}}
          DB_NAME: ${{secrets.DB_NAME}}
          GITHUB_USER: ${{github.actor}}
          BRANCH_NAME: ${{ env.BASE_REF }}
          PASSWORD_NAME: ${{ env.BASE_REF }}-${{ steps.app_name.outputs.value }}

        run: |
          ./.pscale/cli-helper-scripts/delete-old-password.sh

      - name: delete old connection string to MAIN
        id: delete-cs-main
        if: steps.create-dr.conclusion != 'skipped'
        timeout-minutes: 3
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
          PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
          ORG_NAME: ${{secrets.ORG_NAME}}
          DB_NAME: ${{secrets.DB_NAME}}
          GITHUB_USER: ${{github.actor}}
          BRANCH_NAME: main
          PASSWORD_NAME: main-${{ steps.app_name.outputs.value }}
        run: |
          ./.pscale/cli-helper-scripts/delete-old-password.sh

      # added here
      - name: delete old connection string to MAIN-SHADOW
        id: delete-cs-main-shadow
        if: steps.create-dr-main-shadow.conclusion != 'skipped'
        timeout-minutes: 3
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
          PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
          ORG_NAME: ${{secrets.ORG_NAME}}
          DB_NAME: ${{secrets.DB_NAME}}
          GITHUB_USER: ${{github.actor}}
          BRANCH_NAME: main-shadow
          PASSWORD_NAME: main-shadow-${{ steps.app_name.outputs.value }}
        run: |
          ./.pscale/cli-helper-scripts/delete-old-password.sh
