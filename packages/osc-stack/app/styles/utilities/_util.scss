@use "sass:map";
@use "../settings/animation";
@use "../settings/colors";
@use "../settings/global";
@use "../settings/mq" as settings-mq;
@use "../settings/spacing";
@use "../settings/typography";
@use "../tools/functions/deep-map-merge";
@use "../tools/mq" as tools-mq;

///*----------------------------------*\
//  #UTILITIES
//\*----------------------------------*/
//
//  A collection of utilities that allow for quickly applying small styling tweaks to components.
//  NOTE: Use Sparingly.
//
//\*----------------------------------*/
//
// Usage:
// <div class="u-mt-10"></div>

$property-map: (
    margin-top: "mt",
    margin-right: "mr",
    margin-bottom: "mb",
    margin-left: "ml",
    margin: "m",
    padding-top: "pt",
    padding-right: "pr",
    padding-bottom: "pb",
    padding-left: "pl",
    padding: "p",
    border-radius: "br",
);

global.$prop-config: deep-map-merge.deep-map-merge(
    (
        margin-top: (
            0,
            10,
            20,
        ),
        margin-bottom: (
            0,
            10,
            20,
            30,
            50,
            110,
            210,
        ),
        margin-right: (
            5,
            10
        ),
        margin-left: (
            0,
            5,
            10
        ),
        margin: (),
        padding-top: (
            10,
            30,
            50,
            110,
            210,
        ),
        padding-right: (
            0
        ),
        padding-bottom: (
            10,
            30,
            50,
            110,
            210,
        ),
        padding-left: (
            0
        ),
        padding: (
            0,
            15
        ),
        border-radius: (
            10
        )
    ),
    global.$prop-config,
    true
);

@each $property, $values in global.$prop-config {
    $shorthand: map.get($property-map, $property);

    @each $num in $values {
        .u-#{$shorthand}-#{$num} {
            @if is-number($num) {
                #{$property}: #{$num}px;
            } @else {
                #{$property}: #{$num};
            }
        }
    }
}

@include tools-mq.mq(settings-mq.$mq-tab, max) {
    .u-plr-0\@tab {
        padding-right: 0;
        padding-left: 0;
    }
}
.no-padding { padding: 0 !important; }

.sr-only:not(:focus):not(:active) {
    position: absolute;
    width: 1px;
    height: 1px;
    overflow: hidden;
    white-space: nowrap;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
}

[hidden] {
    // stylelint-disable-next-line declaration-no-important
    display: none !important;
}

.u-hidden {
    &-from\@tab {
        @include tools-mq.mq(settings-mq.$mq-tab--lrg) {
            display: none;
        }
    }

    &-from\@desk-med {
        @include tools-mq.mq(settings-mq.$mq-desk--med) {
            display: none;
        }
    }

    &-until\@tab {
        @include tools-mq.mq(settings-mq.$mq-tab--lrg, max) {
            display: none;
        }
    }

    &-until\@desk {
        @include tools-mq.mq(settings-mq.$mq-desk, max) {
            display: none;
        }
    }

    &-until\@desk-med {
        @include tools-mq.mq(settings-mq.$mq-desk--med, max) {
            display: none;
        }
    }
}

// see: settings/colours
@each $class, $text-colour in colors.$colours {
    [data-t-colour="#{$class}"],
    .u-colour-#{$class} {
        color: #{$text-colour};
    }
}

// Backgrounds
@each $class, $bg-color in colors.$colours {
    [data-bg-colour="#{$class}"] {
        background-color: #{$bg-color};
    }
}

// Usage:
// <div class="u-text-bold"></div>
.u-text {
    &-bold {
        font-weight: typography.$weight-bold;
    }

    &-reg {
        font-weight: typography.$weight-reg;
    }

    &-italic {
        font-style: italic;
    }

    &-upper {
        text-transform: uppercase;
    }

    &-lower {
        text-transform: lowercase;
    }

    &-underline {
        text-decoration: underline;
    }

    &-reset {
        text-decoration: none;
        text-transform: none;
    }

    &-left {
        text-align: left;
    }

    &-right {
        text-align: right;
    }

    &-center {
        text-align: center;
    }

    &-baseline {
        display: block;
        line-height: 1;
    }
}

$line-height-map: (
    "1": "1",
    "1-25": "1.25",
    "1-33": "1.33",
    "1-5": "1.5",
    "1-75": "1.75",
);

@each $l-class, $l-unit in $line-height-map {
    .u-lh-#{$l-class} {
        line-height: #{$l-unit};
    }
}

.u-ov {
    &-auto { overflow: auto; }
    &-hid { overflow: hidden; }
    &-vis { overflow: visible; }
}

[data-line-clamp] {
    display: box;
    margin-bottom: (spacing.$global-spacing-s * 2);
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-box-orient: vertical;
}

@for $clamp-i from 1 through 5 {
    [data-line-clamp="#{$clamp-i}"] {
        -webkit-line-clamp: #{$clamp-i};

        // max-height: calc(
        //     (math.div(typography.$base-font-size, 10) * 4)
        //     * #{global.$global-scale-ratio}
        // );
    }
}

.u-line {
    display: block;
    width: 100px;
    height: 2px;
    background-color: colors.$colour-secondary;
    transform: scaleY(0.5);
}

.u-skeleton-box {
    position: relative;
    display: inline-block;
    height: 1em;
    overflow: hidden;
    background-color: #dce3e3;

    &::after {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background-image:
            linear-gradient(
                90deg,
                rgba(#fff, 0) 0,
                rgba(#fff, 0.2) 20%,
                rgba(#fff, 0.5) 60%,
                rgba(#fff, 0)
            );
        transform: translateX(-100%);
        animation: shimmer 1s animation.$ease-in-out-cubic infinite;
        content: "";
    }

    @keyframes shimmer {
        100% {
            transform: translateX(100%);
        }
    }

    .is-loaded & {
        display: none;
    }
}

.is-sticky {
    position: sticky;
    top: 0;
}
