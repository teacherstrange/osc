/* stylelint-disable plugin/selector-bem-pattern */
@use "sass:map";
@use "sass:string";
@import "../../styles/settings";
@import "../../styles/tools";

$btn-primary-border: solid 3px var(--color-secondary);
$btn-primary-offset: 6px;
$btn-radius: 40px;
$btn-properties: (
    primary: (
        bg-color: var(--color-secondary),
        bg-hover-color: var(--color-primary),
        fg-color: var(--color-tertiary),
        font-weight: $fw-bold,
        letter-spacing: $ls-xs,
        text-transform: uppercase,
        border: $btn-primary-border,
        offset: $btn-primary-offset,
        inverse-bg-color: var(--color-tertiary),
        inverse-bg-hover-color: var(--color-tertiary),
        inverse-fg-color: var(--color-secondary),
        after: (
            position: absolute,
            bottom: calc($btn-primary-offset * -1),
            left: $btn-primary-offset,
            width: 100%,
            height: 100%,
            background-color: transparent,
            border-right: $btn-primary-border,
            border-bottom: $btn-primary-border,
            content: ""
        ),
        sizes: (
            sm: (
                padding: $space-xs $space-m,
                font-size: $fs-xs
            ),
            md: (
                padding: $space-s $space-xl,
                font-size: $fs-s
            ),
            lg: (
                padding: $space-m $space-5xl,
                font-size: $fs-m
            )
        )
    ),
    secondary: (
        bg-color: transparent,
        bg-hover-color: var(--color-secondary),
        fg-color: var(--color-secondary),
        fg-hover-color: var(--color-tertiary),
        font-weight: $fw-bold,
        letter-spacing: $ls-xs,
        text-transform: uppercase,
        border: solid 1px var(--color-secondary),
        inverse-bg-hover-color: var(--color-tertiary),
        inverse-fg-color: var(--color-tertiary),
        inverse-fg-hover-color: var(--color-secondary),
        sizes: (
            sm: (
                padding: $space-xs $space-m,
                font-size: $fs-xs
            ),
            md: (
                padding: $space-xs $space-m,
                font-size: $fs-s
            ),
            lg: (
                padding: $space-m $space-xl,
                font-size: $fs-m
            )
        )
    ),
    tertiary: (
        bg-color: transparent,
        bg-hover-color: var(--color-secondary),
        fg-color: var(--color-neutral-600),
        fg-hover-color: var(--color-tertiary),
        font-weight: $fw-bold,
        letter-spacing: $ls-xs,
        text-transform: uppercase,
        border: 1px solid var(--color-neutral-400),
        inverse-bg-hover-color: var(--color-neutral-100),
        inverse-fg-color: var(--color-neutral-100),
        inverse-fg-hover-color: var(--color-secondary),
        sizes: (
            sm: (
                padding: $space-xs $space-m,
                font-size: $fs-xs
            ),
            md: (
                padding: $space-xs $space-m,
                font-size: $fs-s
            ),
            lg: (
                padding: $space-m $space-xl,
                font-size: $fs-m
            )
        )
    ),
    quaternary: (
        bg-color: transparent,
        bg-hover-color: transparent,
        fg-color: var(--color-secondary),
        fg-hover-color: var(--color-primary),
        font-weight: $fw-reg,
        gap: 0.8em,
        inverse-fg-color: var(--color-tertiary),
        sizes: (
            sm: (
                font-size: $fs-xs
            ),
            md: (
                font-size: $fs-s
            ),
            lg: (
                font-size: $fs-m
            )
        )
    ),
    quinary: (
        bg-color: var(--color-septenary),
        bg-hover-color: var(--color-primary),
        fg-color: var(--color-secondary),
        fg-hover-color: var(--color-tertiary),
        font-weight: $fw-bold,
        letter-spacing: $ls-xs,
        text-transform: uppercase,
        sizes: (
            sm: (
                padding: $space-xs $space-m,
                font-size: $fs-xs
            ),
            md: (
                padding: $space-xs $space-m,
                font-size: $fs-s
            ),
            lg: (
                padding: $space-m $space-xl,
                font-size: $fs-m
            )
        )
    ),
    primary-gradient: (
        bg-image: var(--color-gradient-quaternary-90),
        bg-hover-color: var(--color-nonary),
        fg-color: var(--color-tertiary),
        font-weight: $fw-bold,
        letter-spacing: $ls-xs,
        text-transform: uppercase,
        inverse-bg-color: var(--color-tertiary),
        inverse-bg-hover-color: transparent,
        inverse-fg-color: var(--color-secondary),
        inverse-fg-hover-color: var(--color-tertiary),
        sizes: (
            sm: (
                padding: $space-2xs $space-m,
                font-size: $fs-xs
            ),
            md: (
                padding: $space-xs $space-2xl,
                font-size: $fs-s
            ),
            lg: (
                padding: $space-m $space-3xl,
                font-size: $fs-m
            )
        )
    ),
    secondary-gradient: (
        bg-image: var(--color-gradient-septenary-90),
        bg-hover-color: var(--color-quaternary),
        fg-color: var(--color-tertiary),
        font-weight: $fw-bold,
        font-size: $fs-s,
        letter-spacing: $ls-xs,
        text-transform: uppercase,
        inverse-bg-color: var(--color-tertiary),
        inverse-bg-hover-color: transparent,
        inverse-fg-color: var(--color-secondary),
        inverse-fg-hover-color: var(--color-tertiary),
        sizes: (
            sm: (
                padding: $space-2xs $space-m,
                font-size: $fs-xs
            ),
            md: (
                padding: $space-xs $space-2xl
            ),
            lg: (
                padding: $space-m $space-3xl,
                font-size: $fs-m
            )
        )
    )
);

.c-btn {
    $self: &;

    color: inherit;
    font: inherit;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;
    letter-spacing: normal;
    transition: all $timing-s $ease-in;
    cursor: pointer;
    pointer-events: auto;

    &,
    &__inner {
        position: relative;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        box-sizing: border-box;
    }

    &:focus-visible {
        box-shadow: 0 0 0 0.5rem var(--color-tertiary), 0 0 0 0.75rem var(--color-primary);
    }

    &__inner {
        width: 100%;
        gap: 0.6em;
        pointer-events: none; // We will want to prevent bubbling/capturing of events on the inner span
    }

    svg {
        flex-shrink: 0;
        width: 1em; // Make sure svg scales with the font-size
        height: 1em; // Make sure svg scales with the font-size
        font-size: 1.4em;
    }

    // *----------------------------------*/
    //  Disabled
    // *----------------------------------*/
    &[data-disabled] {
        cursor: not-allowed;
    }

    // *----------------------------------*/
    //  Loading
    // *----------------------------------*/
    &.is-loading {
        cursor: auto;
        pointer-events: none;
    }

    // *----------------------------------*/
    // Rounded borders
    // *----------------------------------*/
    &.is-pill {
        &,
        #{$self}__inner,
        &::before {
            border-radius: $btn-radius;
        }

        &::after,
        > span::after {
            display: none;
        }

        &:hover > span {
            transform: none;
        }
    }

    // *----------------------------------*/
    // Full width
    // *----------------------------------*/
    &.is-full {
        width: 100%;
    }

    // *----------------------------------*/
    //  Variants
    // *----------------------------------*/
    @each $class, $property in $btn-properties {
        &--#{$class} {
            color: map.get($property, fg-color);
            font-size: map.get($property, font-size);
            font-weight: map.get($property, font-weight);
            text-transform: map.get($property, text-transform);
            letter-spacing: map.get($property, letter-spacing);

            @if $class != "primary" {
                background-color: map.get($property, bg-color);
                border: map.get($property, border);
            }

            // If we're on a gradient modifier then set the background image
            @if string.index($class, "-gradient") {
                background-color: map.get($property, bg-color);
                background-image: map.get($property, bg-image);

                // Use a pseudo element to imitate changing the background-color as we
                // can't transition a background-image into a color
                &::before {
                    position: absolute;
                    content: "";
                    inset: 0;
                    transition: all $timing-m $ease-in-out;
                }
            }

            @if map.has-key($property, after) {
                &::after {
                    @each $key, $value in map.get($property, after) {
                        #{$key}: $value;
                    }
                }
            }

            #{$self}__inner {
                gap: map.get($property, gap);

                @if $class == "primary" {
                    background-color: map.get($property, bg-color);
                    transition: all $timing-s $ease-in;
                }

                @include z-index(button);
            }

            &:hover,
            &:active {
                @if $class != "primary" {
                    background-color: map.get($property, bg-hover-color);
                }

                color: map.get($property, fg-hover-color);

                @if map.get($property, offset) {
                    > #{$self}__inner {
                        background-color: map.get($property, bg-hover-color);
                        transform: translate($btn-primary-offset, $btn-primary-offset);
                    }
                }

                @if string.index($class, "-gradient") {
                    &::before {
                        background-color: map.get($property, bg-hover-color);
                    }
                }
            }

            &[data-disabled] {
                opacity: 0.75;
                &:hover > #{$self}__inner {
                    background-color: map.get($property, bg-color);
                    color: map.get($property, fg-color);
                    transform: none;
                }
            }

            // *----------------------------------*/
            //  Sizes
            // *----------------------------------*/
            @each $size, $properties in map.get($property, sizes) {
                @if $class == "primary" {
                    &#{$self}--#{$size} #{$self}__inner {
                        @each $property, $value in $properties {
                            #{$property}: $value;
                        }
                    }
                } @else {
                    &#{$self}--#{$size} {
                        @each $property, $value in $properties {
                            #{$property}: $value;
                        }
                    }
                }
            }
        }

        // *----------------------------------*/
        //  Dark mode / inverse overrides
        // *----------------------------------*/
        &.is-inversed {
            @each $class, $property in $btn-properties {
                &#{$self}--#{$class} {
                    @if $class != "primary" {
                        background-color: map.get($property, inverse-bg-color);
                    }

                    @if string.index($class, "-gradient") {
                        background-color: map.get($property, inverse-bg-color);
                        background-image: none;

                        &::before {
                            display: none;
                        }
                    }

                    border-color: map.get($property, inverse-fg-color);
                    color: map.get($property, inverse-fg-color);

                    @if map.has-key($property, after) {
                        &::after {
                            border-color: map.get($property, inverse-bg-color);
                        }
                    }

                    &:hover,
                    &:active {
                        @if $class != "primary" {
                            background-color: map.get($property, inverse-bg-hover-color);
                        }

                        color: map.get($property, inverse-fg-hover-color);
                    }

                    #{$self}__inner {
                        @if $class == "primary" {
                            background-color: map.get($property, inverse-bg-color);
                        }
                    }
                }
            }
        }

        @if string.index($class, "-gradient") {
            .theme--dark &--#{$class} {
                background-color: var(--color-secondary);
                background-image: none;

                &::before {
                    display: none;
                }

                &:hover,
                &:active {
                    background-color: transparent;
                    color: var(--color-secondary);
                }
            }
        }
    }
}

// *----------------------------------*/
//  Button Group
// *----------------------------------*/
.c-btn-group {
    display: flex;
    gap: $space-m;
    flex-wrap: wrap;
    align-items: center;

    &--column {
        flex-direction: column;
        align-items: flex-start;
    }
}

// *----------------------------------*/
//  Button Loader
// *----------------------------------*/
.c-btn-loader {
    display: flex;
    gap: 0.25em;

    &__dot {
        width: 2px;
        height: 2px;
        background-color: currentcolor;
        border-radius: $rad;

        // Start here so we have a smoother transition when switching the loading state on
        transform: translateY(0.2em);
        animation: bounce 1s ease-in-out infinite;

        &:nth-child(1) {
            animation-delay: 0s;
        }

        &:nth-child(2) {
            animation-delay: 0.1s;
        }

        &:nth-child(3) {
            animation-delay: 0.2s;
        }
    }
}

@keyframes bounce {
    0%,
    100% {
        transform: translateY(0.2em);
    }

    50% {
        transform: translateY(-0.2em);
    }
}
