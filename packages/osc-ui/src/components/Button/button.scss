/* stylelint-disable plugin/selector-bem-pattern */
@use "sass:map";
@use "../../styles/settings" as *;
@use "../../styles/tools" as *;

// Set the border radius for the button variants, mostly for use on the academic hub buttons
@mixin pill($outer, $size: "") {
    $btn-radius: 40px;

    border-radius: $btn-radius;

    &::after,
    > span::after {
        display: none;
    }

    &:hover > span {
        transform: none;
    }

    #{$outer}__inner {
        @if $size == "sm" {
            padding: var(--space-scale-micro) var(--space-scale-zeta);
        } @else {
            padding: var(--space-scale-milli) var(--space-scale-zeta);
        }

        border-radius: $btn-radius;
    }
}

$btn-sizes: (
    sm: (
        padding: var(--space-scale-milli) var(--space-scale-zeta),
    ),
    full: (
        width: 100%,
    ),
);
$btn-properties: (
    primary: (
        bg-color: var(--color-secondary),
        bg-hover-color: var(--color-primary),
        fg-color: var(--color-tertiary),
        font-weight: $weight-bold,
        font-size: var(--font-scale-centi),
        letter-spacing: $letter-spacing-sml,
        text-transform: uppercase,
        padding: var(--space-scale-centi) var(--space-scale-epsilon),
        border: solid 3px var(--color-secondary),
        offset: 6px,
        after: (
            position: absolute,
            bottom: calc(var(--btn-offset) * -1),
            // negative offset
            left: var(--btn-offset),
            width: 100%,
            height: 100%,
            background-color: transparent,
            border-right: var(--btn-border),
            border-bottom: var(--btn-border),
            content: "",
        ),
    ),
    secondary: (
        bg-color: transparent,
        bg-hover-color: var(--color-secondary),
        fg-color: var(--color-secondary),
        fg-hover-color: var(--color-tertiary),
        font-weight: $weight-bold,
        font-size: var(--font-scale-centi),
        letter-spacing: $letter-spacing-sml,
        text-transform: uppercase,
        padding: var(--space-scale-centi) var(--space-scale-epsilon),
        border: solid 1px var(--color-secondary),
    ),
    tertiary: (
        bg-color: transparent,
        bg-hover-color: var(--color-secondary),
        fg-color: var(--color-secondary),
        fg-hover-color: var(--color-tertiary),
        font-weight: $weight-light,
        font-size: var(--font-scale-centi),
        padding: var(--space-scale-centi) var(--space-scale-epsilon),
        border: 1px solid var(--color-quinary),
    ),
    quaternary: (
        bg-color: transparent,
        bg-hover-color: transparent,
        fg-color: var(--color-secondary),
        fg-hover-color: var(--color-primary),
        font-weight: $weight-reg,
        font-size: var(--font-scale-centi),
        gap: 0.8em,
    ),
    quinary: (
        bg-color: var(--color-septenary),
        bg-hover-color: var(--color-primary),
        fg-color: var(--color-secondary),
        fg-hover-color: var(--color-tertiary),
        font-weight: $weight-bold,
        font-size: var(--font-scale-centi),
        letter-spacing: $letter-spacing-sml,
        text-transform: uppercase,
        padding: var(--space-scale-centi) var(--space-scale-epsilon),
    ),
);

.c-btn {
    $self: &;

    color: inherit;
    font: inherit;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;
    letter-spacing: normal;
    cursor: pointer;
    pointer-events: auto;

    &,
    &__inner {
        position: relative;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        box-sizing: border-box;
    }

    &:focus-visible {
        box-shadow: 0 0 0 0.5rem var(--color-tertiary), 0 0 0 0.75rem var(--color-primary);
    }

    &__inner {
        width: 100%;
        gap: 0.6em;
        pointer-events: none; // We will want to prevent bubbling/capturing of events on the inner span
        transition: all $timing-s $ease-in;
    }

    svg {
        flex-shrink: 0;
        width: 1em; // Make sure svg scales with the font-size
        height: 1em; // Make sure svg scales with the font-size
        font-size: 1.4em;
    }

    // *----------------------------------*/
    //  Disabled
    // *----------------------------------*/
    &[data-disabled] {
        cursor: not-allowed;
    }

    // *----------------------------------*/
    //  Loading
    // *----------------------------------*/
    &.is-loading {
        cursor: auto;
        pointer-events: none;
    }

    // *----------------------------------*/
    // Rounded borders
    // *----------------------------------*/
    &.is-pill {
        @include pill($self);
    }

    // *----------------------------------*/
    //  Variants
    // *----------------------------------*/
    @each $class, $property in $btn-properties {
        &--#{$class} {
            --btn-offset: #{map.get($property, offset)};
            --btn-border: #{map.get($property, border)};

            color: map.get($property, fg-color);
            font-size: map.get($property, font-size);
            font-weight: map.get($property, font-weight);
            text-transform: map.get($property, text-transform);
            letter-spacing: map.get($property, letter-spacing);

            @if $class != "primary" {
                border: map.get($property, border);
            }

            @if $class == "quaternary" {
                &#{$self}--sm #{$self}__inner {
                    padding: 0;
                }
            }

            @if map.has-key($property, after) {
                &::after {
                    @each $key, $value in map.get($property, after) {
                        #{$key}: $value;
                    }
                }
            }

            #{$self}__inner {
                padding: map.get($property, padding);
                background-color: map.get($property, bg-color);
                gap: map.get($property, gap);

                @include z-index(button);
            }

            &:hover,
            &:active {
                color: map.get($property, fg-hover-color);

                > #{$self}__inner {
                    background-color: map.get($property, bg-hover-color);
                    transform: translate(var(--btn-offset), var(--btn-offset));
                }
            }

            &[data-disabled] {
                opacity: 0.75;
                &:hover > #{$self}__inner {
                    background-color: map.get($property, bg-color);
                    color: map.get($property, fg-color);
                    transform: none;
                }
            }
        }
    }

    // *----------------------------------*/
    //  Sizes
    // *----------------------------------*/
    @each $class, $property in $btn-sizes {
        &--#{$class} {
            &,
            #{$self}__inner {
                width: map.get($property, width);
            }

            #{$self}__inner {
                padding: map.get($property, padding);
            }

            &.is-pill {
                @include pill($self, $class);
            }
        }
    }
}

// *----------------------------------*/
//  Button Group
// *----------------------------------*/
.c-btn-group {
    display: flex;
    gap: var(--space-scale-zeta);
    flex-wrap: wrap;
    align-items: center;

    &--column {
        flex-direction: column;
        align-items: flex-start;
    }
}

// *----------------------------------*/
//  Button Loader
// *----------------------------------*/
.c-btn-loader {
    display: flex;
    gap: 0.25em;

    &__dot {
        width: 2px;
        height: 2px;
        background-color: currentcolor;
        border-radius: 50%;

        // Start here so we have a smoother transition when switching the loading state on
        transform: translateY(0.2em);
        animation: bounce 1s ease-in-out infinite;

        &:nth-child(1) {
            animation-delay: 0s;
        }

        &:nth-child(2) {
            animation-delay: 0.1s;
        }

        &:nth-child(3) {
            animation-delay: 0.2s;
        }
    }
}

@keyframes bounce {
    0%,
    100% {
        transform: translateY(0.2em);
    }

    50% {
        transform: translateY(-0.2em);
    }
}
