import { screen, waitForElementToBeRemoved } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import type { MouseEvent } from 'react';
import React, { useState } from 'react';
import { render } from 'test-utils';
import { Button, ButtonGroup, CopyButton } from './Button';

describe('default button', () => {
    // A contrived component that sets the loading state on the button when it's clicked
    const ControlledButton = () => {
        const [loading, setLoading] = useState(false);

        const handleClick = (e: MouseEvent<HTMLButtonElement>) => {
            setLoading(true);
        };

        return (
            <Button onClick={handleClick} isLoading={loading} loadingText="Loading">
                Click me
            </Button>
        );
    };

    test('can be controlled by external function', async () => {
        const user = userEvent.setup();

        render(<ControlledButton />);

        const button = screen.getByRole('button');

        await user.click(button);
        expect(button).toHaveTextContent('Loading');
    });

    test('has custom loading text', () => {
        render(
            <Button isLoading={true} loadingText="custom loading">
                Click me
            </Button>
        );

        expect(screen.getByRole('button')).toHaveTextContent('custom loading');
    });

    test('can be disabled', () => {
        render(<Button isDisabled={true}>Can't click me!</Button>);

        expect(screen.getByRole('button')).toBeDisabled();
    });
});

describe('copy button', () => {
    test('adds text to the clipboard', async () => {
        render(<CopyButton textToCopy="Copy me!">Test Button</CopyButton>);

        // Because we're handling the clipboard api we need to replace navigator.clipboard with a stub generated by `userEvent.setup();`
        // See: https://testing-library.com/docs/user-event/clipboard/
        const user = userEvent.setup();
        const button = screen.getByRole('button');

        await user.click(button);

        await navigator.clipboard.readText().then((clipText) => expect(clipText).toBe('Copy me!'));

        expect(button).toHaveTextContent('Copied!');

        await waitForElementToBeRemoved(screen.queryByText('Copied!'));

        expect(button).toHaveTextContent('Test Button');
    });

    test('can be disabled', () => {
        render(
            <CopyButton textToCopy="Copy me!" isDisabled={true}>
                Can't click me!
            </CopyButton>
        );

        expect(screen.getByRole('button')).toBeDisabled();
    });
});

describe('anchor button', () => {
    test('has a href attribute', () => {
        render(
            <Button as="a" href="https://example.com">
                Test Button
            </Button>
        );

        expect(screen.getByRole('link')).toHaveAttribute('href', 'https://example.com');
    });

    test('sets the rel to noopener and noreferrer when target is "_blank"', () => {
        render(
            <Button as="a" href="https://example.com" target="_blank">
                Test Button
            </Button>
        );
        const link = screen.getByRole('link');

        expect(link).toHaveAttribute('target', '_blank');
        expect(link).toHaveAttribute('rel', 'noopener noreferrer');
    });
});

describe('link button', () => {
    test('has a href attribute', () => {
        render(
            <Button as="link" to="/blog">
                Test Button
            </Button>
        );

        expect(screen.getByRole('link')).toHaveAttribute('href', '/blog');
    });

    test('href falls back to homepage url if `to` prop is missing', () => {
        render(
            <>
                {/* @ts-ignore -- we want to test that the to prop is missing, even though ts will shout */}
                <Button as="link">Test Button</Button>
            </>
        );

        expect(screen.getByRole('link')).toHaveAttribute('href', '/');
    });
});

describe('button group', () => {
    test('sets the direction of the group', () => {
        render(
            <ButtonGroup direction="column">
                <Button>Test Button</Button>
                <Button>Test Button</Button>
                <Button>Test Button</Button>
            </ButtonGroup>
        );

        const group = document.querySelector('.c-btn-group');
        expect(group).toHaveClass('c-btn-group--column');
    });
});
