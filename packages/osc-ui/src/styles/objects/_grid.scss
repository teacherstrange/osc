/* stylelint-disable max-line-length */
@use "sass:map";
@use "../settings" as *;
@use "../tools" as *;

/* ============================
// $GRID LAYOUT OBJECT
// A structural element that allows construction of elements using the grid layout system
*/

/* ============================
//  Usage:
//
// <div class="o-grid">
//     <div class="o-grid__col--12  o-grid__col--6@tab  o-grid__col--4@desk">
//         ...
//     </div>
// </div>
*/
$grid-columns: 12 !default;
$grid-gutter-width: $global-spacing !default;

// Add a 0 value to our media queries so we can generate class names without an infix
$breakpoints: map.merge(
    (
        "default": 0
    ),
    $media-queries
);

// Minimum breakpoint width.
// ----------------------------------------
//    >> breakpoint-min(mob, (mob: 360, mob-med: 420, mob-lrg: 560, tab: 768, tab-med: 820, tab-lrg: 960, desk: 1024, desk-med: 1280, desk-lrg: 1440))
//    360
@function breakpoint-min($name, $breakpoints) {
    // map.get returns the value associated with the specified key
    $min: map.get($breakpoints, $name);

    // IF $min is NOT EQUAL to 0 then set the $min to null
    @return if($min != 0, $min, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
// ----------------------------------------
//    >> breakpoint-infix(mob, (mob: 360, mob-med: 420, mob-lrg: 560, tab: 768, tab-med: 820, tab-lrg: 960, desk: 1024, desk-med: 1280, desk-lrg: 1440)
//    ""
//    >> breakpoint-infix(tab-med, (mob: 360, mob-med: 420, mob-lrg: 560, tab: 768, tab-med: 820, tab-lrg: 960, desk: 1024, desk-med: 1280, desk-lrg: 1440)
//    "\@tab-med"
@function breakpoint-infix($name, $breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", "#{\@}#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin breakpoint-up($name, $breakpoints) {
    // If the breakpoint is equal to null return null
    // ELSE return the media query token (e.g. "mob-med")
    $min: if(breakpoint-min($name, $breakpoints) == null, null, map.get($breakpoints, $name));

    @if $min {
        @include mq($min) {
            @content;
        }
    } @else {
        @content;
    }
}

.o-grid {
    display: grid;
    grid-template-columns: repeat(#{$grid-columns}, 1fr);
    gap: $grid-gutter-width;

    // map.keys returns a list of the keys in the $breakpoints e.g, mob, mob-med, mob-lrg ... etc
    @each $breakpoint in map.keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);

        @include breakpoint-up($breakpoint, $breakpoints) {
            @if $grid-columns > 0 {
                @for $i from 1 through $grid-columns {
                    &__col--#{$i}#{$infix} {
                        grid-column: auto / span $i;
                    }
                }

                // Start with `1` because `0` is an invalid value.
                // Ends with `$grid-columns - 1` because offsetting by the width of an entire row isn't possible.
                @for $i from 1 through ($grid-columns - 1) {
                    &__col--start-#{$i}#{$infix} {
                        grid-column-start: $i;
                    }
                }
            }
        }
    }
}
