@use "sass:math";
@use "global";
@use "../tools/fluid-scale" as *;

///*----------------------------------*\
//  #SPACING SETTINGS
//\*----------------------------------*/
//
// The spacing system is created by defining a scale of non-linear (spacing) values using our
// base values from the fluid scale in our tokens. This matches the scale used for the font sizes to create
// a consistent vertical rhythm.
// Should you need to change how the spacing works you can update the values in the tokens/fluid-scale.js file.
// NOTE: This will also affect the font sizes.
//
//\*----------------------------------*/

:root {
    // We're using px to define the values in this scale so we don't adjust the spacing along with the font size
    // This helps to keep the spacing from increasing along with the font size if a user changes their prefernces.
    // Ref: https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/#strategic-unit-deployment
    @include fluid-scale("space", "px");
}

// Spacing values are determined based on your projectâ€™s fluid scale.
// It is not recommended that you modify these following variables
// (it can break your vertical rhythm), but if you need to, you can.
$global-spacing-s: var(--space-scale-milli);
$global-spacing: var(--space-scale-zeta);
$global-spacing-m: var(--space-scale-epsilon);
$global-spacing-l: var(--space-scale-delta);
$global-spacing-xl: var(--space-scale-gamma);

// For instances when we want the spacing to scale with the user's font size
// i.e. adding a margin bottom to a paragraph, we would expect that to increase with the font size
$global-spacing-relative-s: var(--font-scale-milli);
$global-spacing-relative: var(--space-font-zeta);
$global-spacing-relative-m: var(--font-scale-epsilon);
$global-spacing-relative-l: var(--font-scale-delta);
$global-spacing-relative-xl: var(--font-scale-gamma);

